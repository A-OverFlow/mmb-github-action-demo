name: CI/CD for Java Project

on:
  pull_request:
    types: [opened, synchronize, closed]
    branches: [develop, main]
  push:
    branches:
      - develop
      - main

jobs:
  build:
    if: github.event.action == 'opened' || github.event.action == 'synchronize' || github.event_name == 'push'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the code
        uses: actions/checkout@v3

      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Grant execute permission to Gradle
        run: chmod +x ./gradlew

      - name: Clean and Build with Gradle
        run: ./gradlew clean build

      # 빌드 결과 확인
      - name: Check JAR file existence
        run: |
          echo "Checking build/libs directory..."
          ls -al build/libs || echo "No JAR file found!"

  set-environment:
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.set-env.outputs.environment }}
    steps:
      - name: Set environment variable
        id: set-env
        run: |
          if [[ "${{ github.event_name }}" == "push" ]]; then
            BRANCH_NAME=${{ github.ref_name }}
          else
            BRANCH_NAME=${{ github.base_ref }}
          fi

          echo "Branch name: $BRANCH_NAME"

          if [[ "$BRANCH_NAME" == "main" ]]; then
            echo "environment=prod" >> $GITHUB_OUTPUT
          else
            echo "environment=dev" >> $GITHUB_OUTPUT
          fi

      - name: Check environment
        run: echo "Environment: ${{ steps.set-env.outputs.environment }}"

  image-build:
    runs-on: ubuntu-latest
    needs: [build, set-environment]
    strategy:
      matrix:
        environment: ["${{ needs.set-environment.outputs.environment }}"]
    environment: ${{ matrix.environment }}
    steps:
      - name: Checkout the code
        uses: actions/checkout@v3

      # 최신 실행 가능한 JAR 파일을 찾기
      - name: Find the latest JAR file
        id: jar
        run: |
          JAR_PATH=$(ls build/libs/*SNAPSHOT.jar | head -n 1)
          echo "JAR_PATH=$JAR_PATH" >> $GITHUB_ENV
          echo "Latest JAR file: $JAR_PATH"

      # Docker 로그인
      - name: Log in to Docker Hub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      # Docker 이미지 빌드
      - name: Build Docker image
        run: docker build --build-arg JAR_FILE=${{ env.JAR_PATH }} -t myeongseob91/github_action_demo:${{ github.sha }} .

      # Docker 이미지 푸시
      - name: Push Docker image
        run: docker push myeongseob91/github_action_demo:${{ github.sha }}

  deploy:
    runs-on: ubuntu-latest
    needs: [image-build]
    strategy:
      matrix:
        environment: ["${{ needs.set-environment.outputs.environment }}"]
    environment: ${{ matrix.environment }}
    steps:
      - name: Checkout the code
        uses: actions/checkout@v3

      - name: Deploy on EC2
        uses: appleboy/ssh-action@v0.1.6
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_KEY }}
          script: |
            sudo docker pull myeongseob91/github_action_demo:${{ github.sha }}
            sudo docker stop app || true
            sudo docker rm app || true
            if [ "${{ matrix.environment }}" == "prod" ]; then
              sudo docker run -d --name app -p 9090:8080 myeongseob91/github_action_demo:${{ github.sha }}
            else
              sudo docker run -d --name app -p 8071:8080 myeongseob91/github_action_demo:${{ github.sha }}
            fi