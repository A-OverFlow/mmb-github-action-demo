name: cicd-2
on:
  pull_request:
    types: [opened, synchronize, closed]
    branches: [develop, main]
    paths:
      - 'demo/src/**'

jobs:
  test:
    if: github.event.action == 'opened' || github.event.action == 'synchronize'
    runs-on: ubuntu-latest
    steps:
      - name: checkout the code
        uses: actions/checkout@v4
      - name: setup-java
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'temurin'
      - name: Grant execute permission to Gradle
        run: chmod +x ./gradlew
      - name: Clean and Build with Gradle
        run: ./gradlew clean build
      - name: Check JAR file existence
        run: |
          echo "Checking build/libs directory..."
          ls -al build/libs || echo "No JAR file found!

  set-environment:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.set-env.outputs.environment }}
    steps:
      - name: set env
        id: set-env
        run: |
          echo ${{ github.base_ref }}
          echo "environment=develop" >> $GITHUB_OUTPUT
          
          if [[ ${{ github.base_ref }} == "main" ]]; then
            echo "environment=prod" >> $GITHUB_OUTPUT 
          fi
      - name: check env
        run: echo ${{ steps.set-env.outputs.environment }}

  image-build:
    runs-on: ubuntu-latest
    needs: [set-environment]
    permissions:
      id-token: write
      contents: read
    strategy:
      matrix:
        environment: ["${{ needs.set-environment.outputs.environment }}"]
    environment: ${{ matrix.environment }}
    steps:
      - name: checkout the code
        uses: actions/checkout@v4
      - name: Find the latest JAR file
        id: jar
        run: |
          JAR_PATH=$(ls demo/target/*SNAPSHOT.jar | head -n 1)
          echo "JAR_PATH=$JAR_PATH" >> $GITHUB_ENV
          echo "Latest JAR file: $JAR_PATH"
      - name: Log in to Docker Hub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin
      - name: Build Docker image
        run: docker build --build-arg JAR_FILE=${{ env.JAR_PATH }} -t myeongseob91/github_action_demo:${{ github.sha }} .
      - name: Push Docker image
        run: docker push myeongseob91/github_action_demo:${{ github.sha }}

  deploy:
    runs-on: ubuntu-latest
    needs: [ set-environment, image-build ]
    permissions:
      id-token: write
      contents: read
    strategy:
      matrix:
        environment: ["${{ needs.set-environment.outputs.environment }}"]
    environment: ${{ matrix.environment }}
    steps:
      - name: checkout the code
        uses: actions/checkout@v4
      - name: Connect to EC2
        uses: appleboy/ssh-action@v0.1.8
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_KEY }}
      - name: Deploy application
        run: |
          ssh ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << EOF
            docker pull myeongseob91/github_action_demo:${{ github.sha }}
            docker stop my-app || true
            docker rm my-app || true
            if [ "${{ needs.set-environment.outputs.environment }}" == "develop" ]; then
              docker run -d -p 8060:8080 --name my-app myeongseob91/github_action_demo:${{ github.sha }}
            else
              docker run -d -p 8070:8080 --name my-app myeongseob91/github_action_demo:${{ github.sha }}
            fi
          EOF